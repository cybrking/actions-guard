"""Markdown report generator for ActionsGuard."""

import logging
from pathlib import Path
from datetime import datetime

from actionsguard.reporters.base import BaseReporter
from actionsguard.models import ScanSummary, ScanResult, Severity, Status, RiskLevel


logger = logging.getLogger("actionsguard")


class MarkdownReporter(BaseReporter):
    """Generate Markdown reports."""

    EMOJI_MAP = {
        RiskLevel.CRITICAL: "üî¥",
        RiskLevel.HIGH: "üü†",
        RiskLevel.MEDIUM: "üü°",
        RiskLevel.LOW: "üü¢",
    }

    STATUS_EMOJI = {
        Status.PASS: "‚úÖ",
        Status.WARN: "‚ö†Ô∏è",
        Status.FAIL: "‚ùå",
        Status.ERROR: "üí•",
        Status.SKIP: "‚è≠Ô∏è",
    }

    def generate_report(self, summary: ScanSummary, filename: str = "report") -> Path:
        """
        Generate Markdown report.

        Args:
            summary: Scan summary
            filename: Output filename (without extension)

        Returns:
            Path to generated Markdown file
        """
        output_path = self.output_dir / f"{filename}.md"

        with open(output_path, "w", encoding="utf-8") as f:
            # Title
            f.write("# ActionsGuard Security Scan Report\n\n")
            f.write(f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")

            # Executive Summary
            f.write("## Executive Summary\n\n")
            f.write(f"- **Total Repositories:** {summary.total_repos}\n")
            f.write(f"- **Successful Scans:** {summary.successful_scans}\n")
            f.write(f"- **Failed Scans:** {summary.failed_scans}\n")
            f.write(f"- **Average Score:** {summary.average_score:.1f}/10.0\n")
            if summary.scan_duration:
                f.write(f"- **Scan Duration:** {summary.scan_duration:.1f}s\n")
            f.write("\n")

            # Issue Breakdown
            f.write("### Issue Severity Breakdown\n\n")
            f.write(f"- üî¥ **Critical:** {summary.critical_count}\n")
            f.write(f"- üü† **High:** {summary.high_count}\n")
            f.write(f"- üü° **Medium:** {summary.medium_count}\n")
            f.write(f"- üü¢ **Low:** {summary.low_count}\n")
            f.write("\n")

            # Results by risk level
            critical_repos = [r for r in summary.results if r.risk_level == RiskLevel.CRITICAL and not r.error]
            high_repos = [r for r in summary.results if r.risk_level == RiskLevel.HIGH and not r.error]
            medium_repos = [r for r in summary.results if r.risk_level == RiskLevel.MEDIUM and not r.error]
            low_repos = [r for r in summary.results if r.risk_level == RiskLevel.LOW and not r.error]
            error_repos = [r for r in summary.results if r.error]

            # Critical Risk Repos
            if critical_repos:
                f.write("## üî¥ Critical Risk Repositories\n\n")
                for result in critical_repos:
                    self._write_repository_section(f, result)

            # High Risk Repos
            if high_repos:
                f.write("## üü† High Risk Repositories\n\n")
                for result in high_repos:
                    self._write_repository_section(f, result)

            # Medium Risk Repos
            if medium_repos:
                f.write("## üü° Medium Risk Repositories\n\n")
                for result in medium_repos:
                    self._write_repository_section(f, result)

            # Low Risk Repos (collapsed)
            if low_repos:
                f.write("## üü¢ Low Risk Repositories\n\n")
                f.write("<details>\n<summary>Click to expand</summary>\n\n")
                for result in low_repos:
                    self._write_repository_section(f, result, collapsed=True)
                f.write("</details>\n\n")

            # Failed Scans
            if error_repos:
                f.write("## üí• Failed Scans\n\n")
                for result in error_repos:
                    f.write(f"### [{result.repo_name}]({result.repo_url})\n\n")
                    f.write(f"**Error:** {result.error}\n\n")

            # Footer
            f.write("---\n\n")
            f.write("*Generated by [ActionsGuard](https://github.com/your-username/actionsguard)*\n")

        logger.info(f"Generated Markdown report: {output_path}")
        return output_path

    def _write_repository_section(
        self,
        f,
        result: ScanResult,
        collapsed: bool = False
    ) -> None:
        """Write a repository section to the markdown file."""
        emoji = self.EMOJI_MAP.get(result.risk_level, "‚ö™")

        f.write(f"### {emoji} [{result.repo_name}]({result.repo_url})\n\n")
        f.write(f"**Score:** {result.score:.1f}/10.0 | **Risk:** {result.risk_level.value}\n\n")

        if not result.metadata.get("has_workflows", True):
            f.write("*No GitHub Actions workflows detected*\n\n")
            return

        # Failed checks
        failed_checks = [c for c in result.checks if c.status == Status.FAIL]
        if failed_checks:
            f.write("#### ‚ùå Failed Checks\n\n")
            for check in failed_checks:
                severity_emoji = self._get_severity_emoji(check.severity)
                f.write(f"- **{check.name}** {severity_emoji}\n")
                f.write(f"  - Score: {check.score}/10\n")
                f.write(f"  - Reason: {check.reason}\n")
                if check.documentation_url:
                    f.write(f"  - [Documentation]({check.documentation_url})\n")
                f.write("\n")

        # Warning checks
        warn_checks = [c for c in result.checks if c.status == Status.WARN]
        if warn_checks and not collapsed:
            f.write("#### ‚ö†Ô∏è Warning Checks\n\n")
            for check in warn_checks:
                f.write(f"- **{check.name}** (Score: {check.score}/10)\n")
                f.write(f"  - {check.reason}\n\n")

        # Passed checks (collapsed)
        pass_checks = [c for c in result.checks if c.status == Status.PASS]
        if pass_checks and not collapsed:
            f.write("<details>\n<summary>‚úÖ Passed Checks</summary>\n\n")
            for check in pass_checks:
                f.write(f"- {check.name} (Score: {check.score}/10)\n")
            f.write("\n</details>\n\n")

        f.write("---\n\n")

    def _get_severity_emoji(self, severity: Severity) -> str:
        """Get emoji for severity level."""
        mapping = {
            Severity.CRITICAL: "üî¥",
            Severity.HIGH: "üü†",
            Severity.MEDIUM: "üü°",
            Severity.LOW: "üü¢",
            Severity.INFO: "‚ÑπÔ∏è",
        }
        return mapping.get(severity, "‚ö™")

    def get_extension(self) -> str:
        """Get file extension."""
        return ".md"
